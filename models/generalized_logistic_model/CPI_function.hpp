// Code generated by Stan version 2.19.0

#include <stan/model/model_header.hpp>

namespace CPI_function_model_namespace {

using std::istream;
using std::string;
using std::stringstream;
using std::vector;
using stan::io::dump;
using stan::math::lgamma;
using stan::model::prob_grad;
using namespace stan::math;

static int current_statement_begin__;

stan::io::program_reader prog_reader__() {
    stan::io::program_reader reader;
    reader.add_event(0, 0, "start", "..\stan-models\generalized_logistic_model\CPI_function.stan");
    reader.add_event(115, 113, "end", "..\stan-models\generalized_logistic_model\CPI_function.stan");
    return reader;
}

class CPI_function_model : public prob_grad {
private:
        int N;
        int P;
        int M;
        std::vector<int> IDp;
        std::vector<int> IDs;
        std::vector<int> SEX;
        std::vector<int> AGE;
        std::vector<int> COMED;
        vector_d APOE4;
        vector_d time;
        vector_d S;
        std::vector<int> pbo_flag;
public:
    CPI_function_model(stan::io::var_context& context__,
        std::ostream* pstream__ = 0)
        : prob_grad(0) {
        ctor_body(context__, 0, pstream__);
    }

    CPI_function_model(stan::io::var_context& context__,
        unsigned int random_seed__,
        std::ostream* pstream__ = 0)
        : prob_grad(0) {
        ctor_body(context__, random_seed__, pstream__);
    }

    void ctor_body(stan::io::var_context& context__,
                   unsigned int random_seed__,
                   std::ostream* pstream__) {
        typedef double local_scalar_t__;

        boost::ecuyer1988 base_rng__ =
          stan::services::util::create_rng(random_seed__, 0);
        (void) base_rng__;  // suppress unused var warning

        current_statement_begin__ = -1;

        static const char* function__ = "CPI_function_model_namespace::CPI_function_model";
        (void) function__;  // dummy to suppress unused var warning
        size_t pos__;
        (void) pos__;  // dummy to suppress unused var warning
        std::vector<int> vals_i__;
        std::vector<double> vals_r__;
        local_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
        (void) DUMMY_VAR__;  // suppress unused var warning

        try {
            // initialize data block variables from context__
            current_statement_begin__ = 3;
            context__.validate_dims("data initialization", "N", "int", context__.to_vec());
            N = int(0);
            vals_i__ = context__.vals_i("N");
            pos__ = 0;
            N = vals_i__[pos__++];

            current_statement_begin__ = 4;
            context__.validate_dims("data initialization", "P", "int", context__.to_vec());
            P = int(0);
            vals_i__ = context__.vals_i("P");
            pos__ = 0;
            P = vals_i__[pos__++];

            current_statement_begin__ = 5;
            context__.validate_dims("data initialization", "M", "int", context__.to_vec());
            M = int(0);
            vals_i__ = context__.vals_i("M");
            pos__ = 0;
            M = vals_i__[pos__++];

            current_statement_begin__ = 6;
            validate_non_negative_index("IDp", "N", N);
            context__.validate_dims("data initialization", "IDp", "int", context__.to_vec(N));
            IDp = std::vector<int>(N, int(0));
            vals_i__ = context__.vals_i("IDp");
            pos__ = 0;
            size_t IDp_k_0_max__ = N;
            for (size_t k_0__ = 0; k_0__ < IDp_k_0_max__; ++k_0__) {
                IDp[k_0__] = vals_i__[pos__++];
            }

            current_statement_begin__ = 7;
            validate_non_negative_index("IDs", "N", N);
            context__.validate_dims("data initialization", "IDs", "int", context__.to_vec(N));
            IDs = std::vector<int>(N, int(0));
            vals_i__ = context__.vals_i("IDs");
            pos__ = 0;
            size_t IDs_k_0_max__ = N;
            for (size_t k_0__ = 0; k_0__ < IDs_k_0_max__; ++k_0__) {
                IDs[k_0__] = vals_i__[pos__++];
            }

            current_statement_begin__ = 8;
            validate_non_negative_index("SEX", "N", N);
            context__.validate_dims("data initialization", "SEX", "int", context__.to_vec(N));
            SEX = std::vector<int>(N, int(0));
            vals_i__ = context__.vals_i("SEX");
            pos__ = 0;
            size_t SEX_k_0_max__ = N;
            for (size_t k_0__ = 0; k_0__ < SEX_k_0_max__; ++k_0__) {
                SEX[k_0__] = vals_i__[pos__++];
            }

            current_statement_begin__ = 9;
            validate_non_negative_index("AGE", "N", N);
            context__.validate_dims("data initialization", "AGE", "int", context__.to_vec(N));
            AGE = std::vector<int>(N, int(0));
            vals_i__ = context__.vals_i("AGE");
            pos__ = 0;
            size_t AGE_k_0_max__ = N;
            for (size_t k_0__ = 0; k_0__ < AGE_k_0_max__; ++k_0__) {
                AGE[k_0__] = vals_i__[pos__++];
            }

            current_statement_begin__ = 10;
            validate_non_negative_index("COMED", "N", N);
            context__.validate_dims("data initialization", "COMED", "int", context__.to_vec(N));
            COMED = std::vector<int>(N, int(0));
            vals_i__ = context__.vals_i("COMED");
            pos__ = 0;
            size_t COMED_k_0_max__ = N;
            for (size_t k_0__ = 0; k_0__ < COMED_k_0_max__; ++k_0__) {
                COMED[k_0__] = vals_i__[pos__++];
            }

            current_statement_begin__ = 11;
            validate_non_negative_index("APOE4", "N", N);
            context__.validate_dims("data initialization", "APOE4", "vector_d", context__.to_vec(N));
            APOE4 = Eigen::Matrix<double, Eigen::Dynamic, 1>(N);
            vals_r__ = context__.vals_r("APOE4");
            pos__ = 0;
            size_t APOE4_j_1_max__ = N;
            for (size_t j_1__ = 0; j_1__ < APOE4_j_1_max__; ++j_1__) {
                APOE4(j_1__) = vals_r__[pos__++];
            }

            current_statement_begin__ = 12;
            validate_non_negative_index("time", "N", N);
            context__.validate_dims("data initialization", "time", "vector_d", context__.to_vec(N));
            time = Eigen::Matrix<double, Eigen::Dynamic, 1>(N);
            vals_r__ = context__.vals_r("time");
            pos__ = 0;
            size_t time_j_1_max__ = N;
            for (size_t j_1__ = 0; j_1__ < time_j_1_max__; ++j_1__) {
                time(j_1__) = vals_r__[pos__++];
            }

            current_statement_begin__ = 13;
            validate_non_negative_index("S", "N", N);
            context__.validate_dims("data initialization", "S", "vector_d", context__.to_vec(N));
            S = Eigen::Matrix<double, Eigen::Dynamic, 1>(N);
            vals_r__ = context__.vals_r("S");
            pos__ = 0;
            size_t S_j_1_max__ = N;
            for (size_t j_1__ = 0; j_1__ < S_j_1_max__; ++j_1__) {
                S(j_1__) = vals_r__[pos__++];
            }


            // initialize transformed data variables
            current_statement_begin__ = 18;
            validate_non_negative_index("pbo_flag", "N", N);
            pbo_flag = std::vector<int>(N, int(0));
            stan::math::fill(pbo_flag, std::numeric_limits<int>::min());

            // execute transformed data statements
            current_statement_begin__ = 19;
            for (int i = 1; i <= N; ++i) {

                current_statement_begin__ = 20;
                stan::model::assign(pbo_flag, 
                            stan::model::cons_list(stan::model::index_uni(i), stan::model::nil_index_list()), 
                            0, 
                            "assigning variable pbo_flag");
                current_statement_begin__ = 21;
                if (as_bool(logical_lte(get_base1(IDs,i,"IDs",1), 15))) {
                    current_statement_begin__ = 21;
                    stan::model::assign(pbo_flag, 
                                stan::model::cons_list(stan::model::index_uni(i), stan::model::nil_index_list()), 
                                1, 
                                "assigning variable pbo_flag");
                }
            }

            // validate transformed data

            // validate, set parameter ranges
            num_params_r__ = 0U;
            param_ranges_i__.clear();
            current_statement_begin__ = 28;
            num_params_r__ += 1;
            current_statement_begin__ = 29;
            num_params_r__ += 1;
            current_statement_begin__ = 30;
            num_params_r__ += 1;
            current_statement_begin__ = 31;
            num_params_r__ += 1;
            current_statement_begin__ = 32;
            num_params_r__ += 1;
            current_statement_begin__ = 33;
            num_params_r__ += 1;
            current_statement_begin__ = 34;
            num_params_r__ += 1;
            current_statement_begin__ = 35;
            num_params_r__ += 1;
            current_statement_begin__ = 36;
            num_params_r__ += 1;
            current_statement_begin__ = 37;
            num_params_r__ += 1;
            current_statement_begin__ = 38;
            num_params_r__ += 1;
            current_statement_begin__ = 39;
            num_params_r__ += 1;
            current_statement_begin__ = 42;
            validate_non_negative_index("eta_pb", "P", P);
            num_params_r__ += P;
            current_statement_begin__ = 43;
            validate_non_negative_index("eta_pr", "P", P);
            num_params_r__ += P;
            current_statement_begin__ = 44;
            validate_non_negative_index("eta_sb", "M", M);
            num_params_r__ += M;
            current_statement_begin__ = 45;
            validate_non_negative_index("eta_sr", "M", M);
            num_params_r__ += M;
            current_statement_begin__ = 46;
            num_params_r__ += 1;
            current_statement_begin__ = 47;
            num_params_r__ += 1;
            current_statement_begin__ = 48;
            num_params_r__ += 1;
            current_statement_begin__ = 49;
            num_params_r__ += 1;
        } catch (const std::exception& e) {
            stan::lang::rethrow_located(e, current_statement_begin__, prog_reader__());
            // Next line prevents compiler griping about no return
            throw std::runtime_error("*** IF YOU SEE THIS, PLEASE REPORT A BUG ***");
        }
    }

    ~CPI_function_model() { }


    void transform_inits(const stan::io::var_context& context__,
                         std::vector<int>& params_i__,
                         std::vector<double>& params_r__,
                         std::ostream* pstream__) const {
        typedef double local_scalar_t__;
        stan::io::writer<double> writer__(params_r__, params_i__);
        size_t pos__;
        (void) pos__; // dummy call to supress warning
        std::vector<double> vals_r__;
        std::vector<int> vals_i__;

        current_statement_begin__ = 28;
        if (!(context__.contains_r("theta_S0")))
            stan::lang::rethrow_located(std::runtime_error(std::string("Variable theta_S0 missing")), current_statement_begin__, prog_reader__());
        vals_r__ = context__.vals_r("theta_S0");
        pos__ = 0U;
        context__.validate_dims("parameter initialization", "theta_S0", "double", context__.to_vec());
        double theta_S0(0);
        theta_S0 = vals_r__[pos__++];
        try {
            writer__.scalar_lub_unconstrain(0, 1, theta_S0);
        } catch (const std::exception& e) {
            stan::lang::rethrow_located(std::runtime_error(std::string("Error transforming variable theta_S0: ") + e.what()), current_statement_begin__, prog_reader__());
        }

        current_statement_begin__ = 29;
        if (!(context__.contains_r("theta_r")))
            stan::lang::rethrow_located(std::runtime_error(std::string("Variable theta_r missing")), current_statement_begin__, prog_reader__());
        vals_r__ = context__.vals_r("theta_r");
        pos__ = 0U;
        context__.validate_dims("parameter initialization", "theta_r", "double", context__.to_vec());
        double theta_r(0);
        theta_r = vals_r__[pos__++];
        try {
            writer__.scalar_unconstrain(theta_r);
        } catch (const std::exception& e) {
            stan::lang::rethrow_located(std::runtime_error(std::string("Error transforming variable theta_r: ") + e.what()), current_statement_begin__, prog_reader__());
        }

        current_statement_begin__ = 30;
        if (!(context__.contains_r("theta_SEX")))
            stan::lang::rethrow_located(std::runtime_error(std::string("Variable theta_SEX missing")), current_statement_begin__, prog_reader__());
        vals_r__ = context__.vals_r("theta_SEX");
        pos__ = 0U;
        context__.validate_dims("parameter initialization", "theta_SEX", "double", context__.to_vec());
        double theta_SEX(0);
        theta_SEX = vals_r__[pos__++];
        try {
            writer__.scalar_unconstrain(theta_SEX);
        } catch (const std::exception& e) {
            stan::lang::rethrow_located(std::runtime_error(std::string("Error transforming variable theta_SEX: ") + e.what()), current_statement_begin__, prog_reader__());
        }

        current_statement_begin__ = 31;
        if (!(context__.contains_r("theta_AGE")))
            stan::lang::rethrow_located(std::runtime_error(std::string("Variable theta_AGE missing")), current_statement_begin__, prog_reader__());
        vals_r__ = context__.vals_r("theta_AGE");
        pos__ = 0U;
        context__.validate_dims("parameter initialization", "theta_AGE", "double", context__.to_vec());
        double theta_AGE(0);
        theta_AGE = vals_r__[pos__++];
        try {
            writer__.scalar_unconstrain(theta_AGE);
        } catch (const std::exception& e) {
            stan::lang::rethrow_located(std::runtime_error(std::string("Error transforming variable theta_AGE: ") + e.what()), current_statement_begin__, prog_reader__());
        }

        current_statement_begin__ = 32;
        if (!(context__.contains_r("theta_APOE4_b")))
            stan::lang::rethrow_located(std::runtime_error(std::string("Variable theta_APOE4_b missing")), current_statement_begin__, prog_reader__());
        vals_r__ = context__.vals_r("theta_APOE4_b");
        pos__ = 0U;
        context__.validate_dims("parameter initialization", "theta_APOE4_b", "double", context__.to_vec());
        double theta_APOE4_b(0);
        theta_APOE4_b = vals_r__[pos__++];
        try {
            writer__.scalar_unconstrain(theta_APOE4_b);
        } catch (const std::exception& e) {
            stan::lang::rethrow_located(std::runtime_error(std::string("Error transforming variable theta_APOE4_b: ") + e.what()), current_statement_begin__, prog_reader__());
        }

        current_statement_begin__ = 33;
        if (!(context__.contains_r("theta_APOE4_r")))
            stan::lang::rethrow_located(std::runtime_error(std::string("Variable theta_APOE4_r missing")), current_statement_begin__, prog_reader__());
        vals_r__ = context__.vals_r("theta_APOE4_r");
        pos__ = 0U;
        context__.validate_dims("parameter initialization", "theta_APOE4_r", "double", context__.to_vec());
        double theta_APOE4_r(0);
        theta_APOE4_r = vals_r__[pos__++];
        try {
            writer__.scalar_unconstrain(theta_APOE4_r);
        } catch (const std::exception& e) {
            stan::lang::rethrow_located(std::runtime_error(std::string("Error transforming variable theta_APOE4_r: ") + e.what()), current_statement_begin__, prog_reader__());
        }

        current_statement_begin__ = 34;
        if (!(context__.contains_r("theta_COMED")))
            stan::lang::rethrow_located(std::runtime_error(std::string("Variable theta_COMED missing")), current_statement_begin__, prog_reader__());
        vals_r__ = context__.vals_r("theta_COMED");
        pos__ = 0U;
        context__.validate_dims("parameter initialization", "theta_COMED", "double", context__.to_vec());
        double theta_COMED(0);
        theta_COMED = vals_r__[pos__++];
        try {
            writer__.scalar_unconstrain(theta_COMED);
        } catch (const std::exception& e) {
            stan::lang::rethrow_located(std::runtime_error(std::string("Error transforming variable theta_COMED: ") + e.what()), current_statement_begin__, prog_reader__());
        }

        current_statement_begin__ = 35;
        if (!(context__.contains_r("tau")))
            stan::lang::rethrow_located(std::runtime_error(std::string("Variable tau missing")), current_statement_begin__, prog_reader__());
        vals_r__ = context__.vals_r("tau");
        pos__ = 0U;
        context__.validate_dims("parameter initialization", "tau", "double", context__.to_vec());
        double tau(0);
        tau = vals_r__[pos__++];
        try {
            writer__.scalar_unconstrain(tau);
        } catch (const std::exception& e) {
            stan::lang::rethrow_located(std::runtime_error(std::string("Error transforming variable tau: ") + e.what()), current_statement_begin__, prog_reader__());
        }

        current_statement_begin__ = 36;
        if (!(context__.contains_r("beta")))
            stan::lang::rethrow_located(std::runtime_error(std::string("Variable beta missing")), current_statement_begin__, prog_reader__());
        vals_r__ = context__.vals_r("beta");
        pos__ = 0U;
        context__.validate_dims("parameter initialization", "beta", "double", context__.to_vec());
        double beta(0);
        beta = vals_r__[pos__++];
        try {
            writer__.scalar_unconstrain(beta);
        } catch (const std::exception& e) {
            stan::lang::rethrow_located(std::runtime_error(std::string("Error transforming variable beta: ") + e.what()), current_statement_begin__, prog_reader__());
        }

        current_statement_begin__ = 37;
        if (!(context__.contains_r("beta_bateman")))
            stan::lang::rethrow_located(std::runtime_error(std::string("Variable beta_bateman missing")), current_statement_begin__, prog_reader__());
        vals_r__ = context__.vals_r("beta_bateman");
        pos__ = 0U;
        context__.validate_dims("parameter initialization", "beta_bateman", "double", context__.to_vec());
        double beta_bateman(0);
        beta_bateman = vals_r__[pos__++];
        try {
            writer__.scalar_unconstrain(beta_bateman);
        } catch (const std::exception& e) {
            stan::lang::rethrow_located(std::runtime_error(std::string("Error transforming variable beta_bateman: ") + e.what()), current_statement_begin__, prog_reader__());
        }

        current_statement_begin__ = 38;
        if (!(context__.contains_r("kel")))
            stan::lang::rethrow_located(std::runtime_error(std::string("Variable kel missing")), current_statement_begin__, prog_reader__());
        vals_r__ = context__.vals_r("kel");
        pos__ = 0U;
        context__.validate_dims("parameter initialization", "kel", "double", context__.to_vec());
        double kel(0);
        kel = vals_r__[pos__++];
        try {
            writer__.scalar_unconstrain(kel);
        } catch (const std::exception& e) {
            stan::lang::rethrow_located(std::runtime_error(std::string("Error transforming variable kel: ") + e.what()), current_statement_begin__, prog_reader__());
        }

        current_statement_begin__ = 39;
        if (!(context__.contains_r("keq")))
            stan::lang::rethrow_located(std::runtime_error(std::string("Variable keq missing")), current_statement_begin__, prog_reader__());
        vals_r__ = context__.vals_r("keq");
        pos__ = 0U;
        context__.validate_dims("parameter initialization", "keq", "double", context__.to_vec());
        double keq(0);
        keq = vals_r__[pos__++];
        try {
            writer__.scalar_unconstrain(keq);
        } catch (const std::exception& e) {
            stan::lang::rethrow_located(std::runtime_error(std::string("Error transforming variable keq: ") + e.what()), current_statement_begin__, prog_reader__());
        }

        current_statement_begin__ = 42;
        if (!(context__.contains_r("eta_pb")))
            stan::lang::rethrow_located(std::runtime_error(std::string("Variable eta_pb missing")), current_statement_begin__, prog_reader__());
        vals_r__ = context__.vals_r("eta_pb");
        pos__ = 0U;
        validate_non_negative_index("eta_pb", "P", P);
        context__.validate_dims("parameter initialization", "eta_pb", "vector_d", context__.to_vec(P));
        Eigen::Matrix<double, Eigen::Dynamic, 1> eta_pb(P);
        size_t eta_pb_j_1_max__ = P;
        for (size_t j_1__ = 0; j_1__ < eta_pb_j_1_max__; ++j_1__) {
            eta_pb(j_1__) = vals_r__[pos__++];
        }
        try {
            writer__.vector_unconstrain(eta_pb);
        } catch (const std::exception& e) {
            stan::lang::rethrow_located(std::runtime_error(std::string("Error transforming variable eta_pb: ") + e.what()), current_statement_begin__, prog_reader__());
        }

        current_statement_begin__ = 43;
        if (!(context__.contains_r("eta_pr")))
            stan::lang::rethrow_located(std::runtime_error(std::string("Variable eta_pr missing")), current_statement_begin__, prog_reader__());
        vals_r__ = context__.vals_r("eta_pr");
        pos__ = 0U;
        validate_non_negative_index("eta_pr", "P", P);
        context__.validate_dims("parameter initialization", "eta_pr", "vector_d", context__.to_vec(P));
        Eigen::Matrix<double, Eigen::Dynamic, 1> eta_pr(P);
        size_t eta_pr_j_1_max__ = P;
        for (size_t j_1__ = 0; j_1__ < eta_pr_j_1_max__; ++j_1__) {
            eta_pr(j_1__) = vals_r__[pos__++];
        }
        try {
            writer__.vector_unconstrain(eta_pr);
        } catch (const std::exception& e) {
            stan::lang::rethrow_located(std::runtime_error(std::string("Error transforming variable eta_pr: ") + e.what()), current_statement_begin__, prog_reader__());
        }

        current_statement_begin__ = 44;
        if (!(context__.contains_r("eta_sb")))
            stan::lang::rethrow_located(std::runtime_error(std::string("Variable eta_sb missing")), current_statement_begin__, prog_reader__());
        vals_r__ = context__.vals_r("eta_sb");
        pos__ = 0U;
        validate_non_negative_index("eta_sb", "M", M);
        context__.validate_dims("parameter initialization", "eta_sb", "vector_d", context__.to_vec(M));
        Eigen::Matrix<double, Eigen::Dynamic, 1> eta_sb(M);
        size_t eta_sb_j_1_max__ = M;
        for (size_t j_1__ = 0; j_1__ < eta_sb_j_1_max__; ++j_1__) {
            eta_sb(j_1__) = vals_r__[pos__++];
        }
        try {
            writer__.vector_unconstrain(eta_sb);
        } catch (const std::exception& e) {
            stan::lang::rethrow_located(std::runtime_error(std::string("Error transforming variable eta_sb: ") + e.what()), current_statement_begin__, prog_reader__());
        }

        current_statement_begin__ = 45;
        if (!(context__.contains_r("eta_sr")))
            stan::lang::rethrow_located(std::runtime_error(std::string("Variable eta_sr missing")), current_statement_begin__, prog_reader__());
        vals_r__ = context__.vals_r("eta_sr");
        pos__ = 0U;
        validate_non_negative_index("eta_sr", "M", M);
        context__.validate_dims("parameter initialization", "eta_sr", "vector_d", context__.to_vec(M));
        Eigen::Matrix<double, Eigen::Dynamic, 1> eta_sr(M);
        size_t eta_sr_j_1_max__ = M;
        for (size_t j_1__ = 0; j_1__ < eta_sr_j_1_max__; ++j_1__) {
            eta_sr(j_1__) = vals_r__[pos__++];
        }
        try {
            writer__.vector_unconstrain(eta_sr);
        } catch (const std::exception& e) {
            stan::lang::rethrow_located(std::runtime_error(std::string("Error transforming variable eta_sr: ") + e.what()), current_statement_begin__, prog_reader__());
        }

        current_statement_begin__ = 46;
        if (!(context__.contains_r("omega_pb")))
            stan::lang::rethrow_located(std::runtime_error(std::string("Variable omega_pb missing")), current_statement_begin__, prog_reader__());
        vals_r__ = context__.vals_r("omega_pb");
        pos__ = 0U;
        context__.validate_dims("parameter initialization", "omega_pb", "double", context__.to_vec());
        double omega_pb(0);
        omega_pb = vals_r__[pos__++];
        try {
            writer__.scalar_lb_unconstrain(0, omega_pb);
        } catch (const std::exception& e) {
            stan::lang::rethrow_located(std::runtime_error(std::string("Error transforming variable omega_pb: ") + e.what()), current_statement_begin__, prog_reader__());
        }

        current_statement_begin__ = 47;
        if (!(context__.contains_r("omega_pr")))
            stan::lang::rethrow_located(std::runtime_error(std::string("Variable omega_pr missing")), current_statement_begin__, prog_reader__());
        vals_r__ = context__.vals_r("omega_pr");
        pos__ = 0U;
        context__.validate_dims("parameter initialization", "omega_pr", "double", context__.to_vec());
        double omega_pr(0);
        omega_pr = vals_r__[pos__++];
        try {
            writer__.scalar_lb_unconstrain(0, omega_pr);
        } catch (const std::exception& e) {
            stan::lang::rethrow_located(std::runtime_error(std::string("Error transforming variable omega_pr: ") + e.what()), current_statement_begin__, prog_reader__());
        }

        current_statement_begin__ = 48;
        if (!(context__.contains_r("omega_sb")))
            stan::lang::rethrow_located(std::runtime_error(std::string("Variable omega_sb missing")), current_statement_begin__, prog_reader__());
        vals_r__ = context__.vals_r("omega_sb");
        pos__ = 0U;
        context__.validate_dims("parameter initialization", "omega_sb", "double", context__.to_vec());
        double omega_sb(0);
        omega_sb = vals_r__[pos__++];
        try {
            writer__.scalar_lb_unconstrain(0, omega_sb);
        } catch (const std::exception& e) {
            stan::lang::rethrow_located(std::runtime_error(std::string("Error transforming variable omega_sb: ") + e.what()), current_statement_begin__, prog_reader__());
        }

        current_statement_begin__ = 49;
        if (!(context__.contains_r("omega_sr")))
            stan::lang::rethrow_located(std::runtime_error(std::string("Variable omega_sr missing")), current_statement_begin__, prog_reader__());
        vals_r__ = context__.vals_r("omega_sr");
        pos__ = 0U;
        context__.validate_dims("parameter initialization", "omega_sr", "double", context__.to_vec());
        double omega_sr(0);
        omega_sr = vals_r__[pos__++];
        try {
            writer__.scalar_lb_unconstrain(0, omega_sr);
        } catch (const std::exception& e) {
            stan::lang::rethrow_located(std::runtime_error(std::string("Error transforming variable omega_sr: ") + e.what()), current_statement_begin__, prog_reader__());
        }

        params_r__ = writer__.data_r();
        params_i__ = writer__.data_i();
    }

    void transform_inits(const stan::io::var_context& context,
                         Eigen::Matrix<double, Eigen::Dynamic, 1>& params_r,
                         std::ostream* pstream__) const {
      std::vector<double> params_r_vec;
      std::vector<int> params_i_vec;
      transform_inits(context, params_i_vec, params_r_vec, pstream__);
      params_r.resize(params_r_vec.size());
      for (int i = 0; i < params_r.size(); ++i)
        params_r(i) = params_r_vec[i];
    }


    template <bool propto__, bool jacobian__, typename T__>
    T__ log_prob(std::vector<T__>& params_r__,
                 std::vector<int>& params_i__,
                 std::ostream* pstream__ = 0) const {

        typedef T__ local_scalar_t__;

        local_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
        (void) DUMMY_VAR__;  // dummy to suppress unused var warning

        T__ lp__(0.0);
        stan::math::accumulator<T__> lp_accum__;
        try {
            stan::io::reader<local_scalar_t__> in__(params_r__, params_i__);

            // model parameters
            current_statement_begin__ = 28;
            local_scalar_t__ theta_S0;
            (void) theta_S0;  // dummy to suppress unused var warning
            if (jacobian__)
                theta_S0 = in__.scalar_lub_constrain(0, 1, lp__);
            else
                theta_S0 = in__.scalar_lub_constrain(0, 1);

            current_statement_begin__ = 29;
            local_scalar_t__ theta_r;
            (void) theta_r;  // dummy to suppress unused var warning
            if (jacobian__)
                theta_r = in__.scalar_constrain(lp__);
            else
                theta_r = in__.scalar_constrain();

            current_statement_begin__ = 30;
            local_scalar_t__ theta_SEX;
            (void) theta_SEX;  // dummy to suppress unused var warning
            if (jacobian__)
                theta_SEX = in__.scalar_constrain(lp__);
            else
                theta_SEX = in__.scalar_constrain();

            current_statement_begin__ = 31;
            local_scalar_t__ theta_AGE;
            (void) theta_AGE;  // dummy to suppress unused var warning
            if (jacobian__)
                theta_AGE = in__.scalar_constrain(lp__);
            else
                theta_AGE = in__.scalar_constrain();

            current_statement_begin__ = 32;
            local_scalar_t__ theta_APOE4_b;
            (void) theta_APOE4_b;  // dummy to suppress unused var warning
            if (jacobian__)
                theta_APOE4_b = in__.scalar_constrain(lp__);
            else
                theta_APOE4_b = in__.scalar_constrain();

            current_statement_begin__ = 33;
            local_scalar_t__ theta_APOE4_r;
            (void) theta_APOE4_r;  // dummy to suppress unused var warning
            if (jacobian__)
                theta_APOE4_r = in__.scalar_constrain(lp__);
            else
                theta_APOE4_r = in__.scalar_constrain();

            current_statement_begin__ = 34;
            local_scalar_t__ theta_COMED;
            (void) theta_COMED;  // dummy to suppress unused var warning
            if (jacobian__)
                theta_COMED = in__.scalar_constrain(lp__);
            else
                theta_COMED = in__.scalar_constrain();

            current_statement_begin__ = 35;
            local_scalar_t__ tau;
            (void) tau;  // dummy to suppress unused var warning
            if (jacobian__)
                tau = in__.scalar_constrain(lp__);
            else
                tau = in__.scalar_constrain();

            current_statement_begin__ = 36;
            local_scalar_t__ beta;
            (void) beta;  // dummy to suppress unused var warning
            if (jacobian__)
                beta = in__.scalar_constrain(lp__);
            else
                beta = in__.scalar_constrain();

            current_statement_begin__ = 37;
            local_scalar_t__ beta_bateman;
            (void) beta_bateman;  // dummy to suppress unused var warning
            if (jacobian__)
                beta_bateman = in__.scalar_constrain(lp__);
            else
                beta_bateman = in__.scalar_constrain();

            current_statement_begin__ = 38;
            local_scalar_t__ kel;
            (void) kel;  // dummy to suppress unused var warning
            if (jacobian__)
                kel = in__.scalar_constrain(lp__);
            else
                kel = in__.scalar_constrain();

            current_statement_begin__ = 39;
            local_scalar_t__ keq;
            (void) keq;  // dummy to suppress unused var warning
            if (jacobian__)
                keq = in__.scalar_constrain(lp__);
            else
                keq = in__.scalar_constrain();

            current_statement_begin__ = 42;
            Eigen::Matrix<local_scalar_t__, Eigen::Dynamic, 1> eta_pb;
            (void) eta_pb;  // dummy to suppress unused var warning
            if (jacobian__)
                eta_pb = in__.vector_constrain(P, lp__);
            else
                eta_pb = in__.vector_constrain(P);

            current_statement_begin__ = 43;
            Eigen::Matrix<local_scalar_t__, Eigen::Dynamic, 1> eta_pr;
            (void) eta_pr;  // dummy to suppress unused var warning
            if (jacobian__)
                eta_pr = in__.vector_constrain(P, lp__);
            else
                eta_pr = in__.vector_constrain(P);

            current_statement_begin__ = 44;
            Eigen::Matrix<local_scalar_t__, Eigen::Dynamic, 1> eta_sb;
            (void) eta_sb;  // dummy to suppress unused var warning
            if (jacobian__)
                eta_sb = in__.vector_constrain(M, lp__);
            else
                eta_sb = in__.vector_constrain(M);

            current_statement_begin__ = 45;
            Eigen::Matrix<local_scalar_t__, Eigen::Dynamic, 1> eta_sr;
            (void) eta_sr;  // dummy to suppress unused var warning
            if (jacobian__)
                eta_sr = in__.vector_constrain(M, lp__);
            else
                eta_sr = in__.vector_constrain(M);

            current_statement_begin__ = 46;
            local_scalar_t__ omega_pb;
            (void) omega_pb;  // dummy to suppress unused var warning
            if (jacobian__)
                omega_pb = in__.scalar_lb_constrain(0, lp__);
            else
                omega_pb = in__.scalar_lb_constrain(0);

            current_statement_begin__ = 47;
            local_scalar_t__ omega_pr;
            (void) omega_pr;  // dummy to suppress unused var warning
            if (jacobian__)
                omega_pr = in__.scalar_lb_constrain(0, lp__);
            else
                omega_pr = in__.scalar_lb_constrain(0);

            current_statement_begin__ = 48;
            local_scalar_t__ omega_sb;
            (void) omega_sb;  // dummy to suppress unused var warning
            if (jacobian__)
                omega_sb = in__.scalar_lb_constrain(0, lp__);
            else
                omega_sb = in__.scalar_lb_constrain(0);

            current_statement_begin__ = 49;
            local_scalar_t__ omega_sr;
            (void) omega_sr;  // dummy to suppress unused var warning
            if (jacobian__)
                omega_sr = in__.scalar_lb_constrain(0, lp__);
            else
                omega_sr = in__.scalar_lb_constrain(0);

            // model body
            {
            current_statement_begin__ = 53;
            local_scalar_t__ tgt(DUMMY_VAR__);
            (void) tgt;  // dummy to suppress unused var warning
            stan::math::initialize(tgt, DUMMY_VAR__);
            stan::math::fill(tgt, DUMMY_VAR__);


            current_statement_begin__ = 55;
            lp_accum__.add(normal_log<propto__>(omega_pb, 0, 1));
            current_statement_begin__ = 56;
            lp_accum__.add(normal_log<propto__>(omega_pr, 0, 1));
            current_statement_begin__ = 57;
            lp_accum__.add(normal_log<propto__>(omega_sb, 0, 1));
            current_statement_begin__ = 58;
            lp_accum__.add(normal_log<propto__>(omega_sr, 0, 1));
            current_statement_begin__ = 59;
            lp_accum__.add(normal_log<propto__>(eta_pb, 0, omega_pb));
            current_statement_begin__ = 60;
            lp_accum__.add(normal_log<propto__>(eta_pr, 0, omega_pr));
            current_statement_begin__ = 61;
            lp_accum__.add(normal_log<propto__>(eta_sb, 0, omega_sb));
            current_statement_begin__ = 62;
            lp_accum__.add(normal_log<propto__>(eta_sr, 0, omega_sr));
            current_statement_begin__ = 64;
            lp_accum__.add(normal_log<propto__>(theta_S0, 0, 1));
            current_statement_begin__ = 65;
            lp_accum__.add(normal_log<propto__>(theta_r, 0, 1));
            current_statement_begin__ = 66;
            lp_accum__.add(normal_log<propto__>(theta_SEX, 0, 1));
            current_statement_begin__ = 67;
            lp_accum__.add(normal_log<propto__>(theta_AGE, 0, 1));
            current_statement_begin__ = 68;
            lp_accum__.add(normal_log<propto__>(theta_APOE4_b, 0, 1));
            current_statement_begin__ = 69;
            lp_accum__.add(normal_log<propto__>(theta_APOE4_r, 0, 1));
            current_statement_begin__ = 70;
            lp_accum__.add(normal_log<propto__>(theta_COMED, 0, 1));
            current_statement_begin__ = 71;
            lp_accum__.add(normal_log<propto__>(tau, 0, 1));
            current_statement_begin__ = 72;
            lp_accum__.add(normal_log<propto__>(beta, 0, 1));
            current_statement_begin__ = 73;
            lp_accum__.add(normal_log<propto__>(kel, 0, 1));
            current_statement_begin__ = 74;
            lp_accum__.add(normal_log<propto__>(keq, 0, 1));
            current_statement_begin__ = 75;
            lp_accum__.add(normal_log<propto__>(beta_bateman, 0, 1));
            current_statement_begin__ = 78;
            lp_accum__.add(generalized_logistic_model(IDp, IDs, time, S, APOE4, AGE, SEX, pbo_flag, COMED, theta_S0, theta_r, tau, theta_AGE, theta_APOE4_r, theta_APOE4_b, theta_COMED, beta, theta_SEX, beta_bateman, kel, keq, eta_pb, eta_pr, eta_sb, eta_sr));
            }

        } catch (const std::exception& e) {
            stan::lang::rethrow_located(e, current_statement_begin__, prog_reader__());
            // Next line prevents compiler griping about no return
            throw std::runtime_error("*** IF YOU SEE THIS, PLEASE REPORT A BUG ***");
        }

        lp_accum__.add(lp__);
        return lp_accum__.sum();

    } // log_prob()

    template <bool propto, bool jacobian, typename T_>
    T_ log_prob(Eigen::Matrix<T_,Eigen::Dynamic,1>& params_r,
               std::ostream* pstream = 0) const {
      std::vector<T_> vec_params_r;
      vec_params_r.reserve(params_r.size());
      for (int i = 0; i < params_r.size(); ++i)
        vec_params_r.push_back(params_r(i));
      std::vector<int> vec_params_i;
      return log_prob<propto,jacobian,T_>(vec_params_r, vec_params_i, pstream);
    }


    void get_param_names(std::vector<std::string>& names__) const {
        names__.resize(0);
        names__.push_back("theta_S0");
        names__.push_back("theta_r");
        names__.push_back("theta_SEX");
        names__.push_back("theta_AGE");
        names__.push_back("theta_APOE4_b");
        names__.push_back("theta_APOE4_r");
        names__.push_back("theta_COMED");
        names__.push_back("tau");
        names__.push_back("beta");
        names__.push_back("beta_bateman");
        names__.push_back("kel");
        names__.push_back("keq");
        names__.push_back("eta_pb");
        names__.push_back("eta_pr");
        names__.push_back("eta_sb");
        names__.push_back("eta_sr");
        names__.push_back("omega_pb");
        names__.push_back("omega_pr");
        names__.push_back("omega_sb");
        names__.push_back("omega_sr");
    }


    void get_dims(std::vector<std::vector<size_t> >& dimss__) const {
        dimss__.resize(0);
        std::vector<size_t> dims__;
        dims__.resize(0);
        dimss__.push_back(dims__);
        dims__.resize(0);
        dimss__.push_back(dims__);
        dims__.resize(0);
        dimss__.push_back(dims__);
        dims__.resize(0);
        dimss__.push_back(dims__);
        dims__.resize(0);
        dimss__.push_back(dims__);
        dims__.resize(0);
        dimss__.push_back(dims__);
        dims__.resize(0);
        dimss__.push_back(dims__);
        dims__.resize(0);
        dimss__.push_back(dims__);
        dims__.resize(0);
        dimss__.push_back(dims__);
        dims__.resize(0);
        dimss__.push_back(dims__);
        dims__.resize(0);
        dimss__.push_back(dims__);
        dims__.resize(0);
        dimss__.push_back(dims__);
        dims__.resize(0);
        dims__.push_back(P);
        dimss__.push_back(dims__);
        dims__.resize(0);
        dims__.push_back(P);
        dimss__.push_back(dims__);
        dims__.resize(0);
        dims__.push_back(M);
        dimss__.push_back(dims__);
        dims__.resize(0);
        dims__.push_back(M);
        dimss__.push_back(dims__);
        dims__.resize(0);
        dimss__.push_back(dims__);
        dims__.resize(0);
        dimss__.push_back(dims__);
        dims__.resize(0);
        dimss__.push_back(dims__);
        dims__.resize(0);
        dimss__.push_back(dims__);
    }

    template <typename RNG>
    void write_array(RNG& base_rng__,
                     std::vector<double>& params_r__,
                     std::vector<int>& params_i__,
                     std::vector<double>& vars__,
                     bool include_tparams__ = true,
                     bool include_gqs__ = true,
                     std::ostream* pstream__ = 0) const {
        typedef double local_scalar_t__;

        vars__.resize(0);
        stan::io::reader<local_scalar_t__> in__(params_r__, params_i__);
        static const char* function__ = "CPI_function_model_namespace::write_array";
        (void) function__;  // dummy to suppress unused var warning

        // read-transform, write parameters
        double theta_S0 = in__.scalar_lub_constrain(0, 1);
        vars__.push_back(theta_S0);

        double theta_r = in__.scalar_constrain();
        vars__.push_back(theta_r);

        double theta_SEX = in__.scalar_constrain();
        vars__.push_back(theta_SEX);

        double theta_AGE = in__.scalar_constrain();
        vars__.push_back(theta_AGE);

        double theta_APOE4_b = in__.scalar_constrain();
        vars__.push_back(theta_APOE4_b);

        double theta_APOE4_r = in__.scalar_constrain();
        vars__.push_back(theta_APOE4_r);

        double theta_COMED = in__.scalar_constrain();
        vars__.push_back(theta_COMED);

        double tau = in__.scalar_constrain();
        vars__.push_back(tau);

        double beta = in__.scalar_constrain();
        vars__.push_back(beta);

        double beta_bateman = in__.scalar_constrain();
        vars__.push_back(beta_bateman);

        double kel = in__.scalar_constrain();
        vars__.push_back(kel);

        double keq = in__.scalar_constrain();
        vars__.push_back(keq);

        Eigen::Matrix<double, Eigen::Dynamic, 1> eta_pb = in__.vector_constrain(P);
        size_t eta_pb_j_1_max__ = P;
        for (size_t j_1__ = 0; j_1__ < eta_pb_j_1_max__; ++j_1__) {
            vars__.push_back(eta_pb(j_1__));
        }

        Eigen::Matrix<double, Eigen::Dynamic, 1> eta_pr = in__.vector_constrain(P);
        size_t eta_pr_j_1_max__ = P;
        for (size_t j_1__ = 0; j_1__ < eta_pr_j_1_max__; ++j_1__) {
            vars__.push_back(eta_pr(j_1__));
        }

        Eigen::Matrix<double, Eigen::Dynamic, 1> eta_sb = in__.vector_constrain(M);
        size_t eta_sb_j_1_max__ = M;
        for (size_t j_1__ = 0; j_1__ < eta_sb_j_1_max__; ++j_1__) {
            vars__.push_back(eta_sb(j_1__));
        }

        Eigen::Matrix<double, Eigen::Dynamic, 1> eta_sr = in__.vector_constrain(M);
        size_t eta_sr_j_1_max__ = M;
        for (size_t j_1__ = 0; j_1__ < eta_sr_j_1_max__; ++j_1__) {
            vars__.push_back(eta_sr(j_1__));
        }

        double omega_pb = in__.scalar_lb_constrain(0);
        vars__.push_back(omega_pb);

        double omega_pr = in__.scalar_lb_constrain(0);
        vars__.push_back(omega_pr);

        double omega_sb = in__.scalar_lb_constrain(0);
        vars__.push_back(omega_sb);

        double omega_sr = in__.scalar_lb_constrain(0);
        vars__.push_back(omega_sr);

        double lp__ = 0.0;
        (void) lp__;  // dummy to suppress unused var warning
        stan::math::accumulator<double> lp_accum__;

        local_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
        (void) DUMMY_VAR__;  // suppress unused var warning

        if (!include_tparams__ && !include_gqs__) return;

        try {
            if (!include_gqs__ && !include_tparams__) return;
            if (!include_gqs__) return;
        } catch (const std::exception& e) {
            stan::lang::rethrow_located(e, current_statement_begin__, prog_reader__());
            // Next line prevents compiler griping about no return
            throw std::runtime_error("*** IF YOU SEE THIS, PLEASE REPORT A BUG ***");
        }
    }

    template <typename RNG>
    void write_array(RNG& base_rng,
                     Eigen::Matrix<double,Eigen::Dynamic,1>& params_r,
                     Eigen::Matrix<double,Eigen::Dynamic,1>& vars,
                     bool include_tparams = true,
                     bool include_gqs = true,
                     std::ostream* pstream = 0) const {
      std::vector<double> params_r_vec(params_r.size());
      for (int i = 0; i < params_r.size(); ++i)
        params_r_vec[i] = params_r(i);
      std::vector<double> vars_vec;
      std::vector<int> params_i_vec;
      write_array(base_rng, params_r_vec, params_i_vec, vars_vec, include_tparams, include_gqs, pstream);
      vars.resize(vars_vec.size());
      for (int i = 0; i < vars.size(); ++i)
        vars(i) = vars_vec[i];
    }

    static std::string model_name() {
        return "CPI_function_model";
    }


    void constrained_param_names(std::vector<std::string>& param_names__,
                                 bool include_tparams__ = true,
                                 bool include_gqs__ = true) const {
        std::stringstream param_name_stream__;
        param_name_stream__.str(std::string());
        param_name_stream__ << "theta_S0";
        param_names__.push_back(param_name_stream__.str());
        param_name_stream__.str(std::string());
        param_name_stream__ << "theta_r";
        param_names__.push_back(param_name_stream__.str());
        param_name_stream__.str(std::string());
        param_name_stream__ << "theta_SEX";
        param_names__.push_back(param_name_stream__.str());
        param_name_stream__.str(std::string());
        param_name_stream__ << "theta_AGE";
        param_names__.push_back(param_name_stream__.str());
        param_name_stream__.str(std::string());
        param_name_stream__ << "theta_APOE4_b";
        param_names__.push_back(param_name_stream__.str());
        param_name_stream__.str(std::string());
        param_name_stream__ << "theta_APOE4_r";
        param_names__.push_back(param_name_stream__.str());
        param_name_stream__.str(std::string());
        param_name_stream__ << "theta_COMED";
        param_names__.push_back(param_name_stream__.str());
        param_name_stream__.str(std::string());
        param_name_stream__ << "tau";
        param_names__.push_back(param_name_stream__.str());
        param_name_stream__.str(std::string());
        param_name_stream__ << "beta";
        param_names__.push_back(param_name_stream__.str());
        param_name_stream__.str(std::string());
        param_name_stream__ << "beta_bateman";
        param_names__.push_back(param_name_stream__.str());
        param_name_stream__.str(std::string());
        param_name_stream__ << "kel";
        param_names__.push_back(param_name_stream__.str());
        param_name_stream__.str(std::string());
        param_name_stream__ << "keq";
        param_names__.push_back(param_name_stream__.str());
        size_t eta_pb_j_1_max__ = P;
        for (size_t j_1__ = 0; j_1__ < eta_pb_j_1_max__; ++j_1__) {
            param_name_stream__.str(std::string());
            param_name_stream__ << "eta_pb" << '.' << j_1__ + 1;
            param_names__.push_back(param_name_stream__.str());
        }
        size_t eta_pr_j_1_max__ = P;
        for (size_t j_1__ = 0; j_1__ < eta_pr_j_1_max__; ++j_1__) {
            param_name_stream__.str(std::string());
            param_name_stream__ << "eta_pr" << '.' << j_1__ + 1;
            param_names__.push_back(param_name_stream__.str());
        }
        size_t eta_sb_j_1_max__ = M;
        for (size_t j_1__ = 0; j_1__ < eta_sb_j_1_max__; ++j_1__) {
            param_name_stream__.str(std::string());
            param_name_stream__ << "eta_sb" << '.' << j_1__ + 1;
            param_names__.push_back(param_name_stream__.str());
        }
        size_t eta_sr_j_1_max__ = M;
        for (size_t j_1__ = 0; j_1__ < eta_sr_j_1_max__; ++j_1__) {
            param_name_stream__.str(std::string());
            param_name_stream__ << "eta_sr" << '.' << j_1__ + 1;
            param_names__.push_back(param_name_stream__.str());
        }
        param_name_stream__.str(std::string());
        param_name_stream__ << "omega_pb";
        param_names__.push_back(param_name_stream__.str());
        param_name_stream__.str(std::string());
        param_name_stream__ << "omega_pr";
        param_names__.push_back(param_name_stream__.str());
        param_name_stream__.str(std::string());
        param_name_stream__ << "omega_sb";
        param_names__.push_back(param_name_stream__.str());
        param_name_stream__.str(std::string());
        param_name_stream__ << "omega_sr";
        param_names__.push_back(param_name_stream__.str());

        if (!include_gqs__ && !include_tparams__) return;

        if (include_tparams__) {
        }

        if (!include_gqs__) return;
    }


    void unconstrained_param_names(std::vector<std::string>& param_names__,
                                   bool include_tparams__ = true,
                                   bool include_gqs__ = true) const {
        std::stringstream param_name_stream__;
        param_name_stream__.str(std::string());
        param_name_stream__ << "theta_S0";
        param_names__.push_back(param_name_stream__.str());
        param_name_stream__.str(std::string());
        param_name_stream__ << "theta_r";
        param_names__.push_back(param_name_stream__.str());
        param_name_stream__.str(std::string());
        param_name_stream__ << "theta_SEX";
        param_names__.push_back(param_name_stream__.str());
        param_name_stream__.str(std::string());
        param_name_stream__ << "theta_AGE";
        param_names__.push_back(param_name_stream__.str());
        param_name_stream__.str(std::string());
        param_name_stream__ << "theta_APOE4_b";
        param_names__.push_back(param_name_stream__.str());
        param_name_stream__.str(std::string());
        param_name_stream__ << "theta_APOE4_r";
        param_names__.push_back(param_name_stream__.str());
        param_name_stream__.str(std::string());
        param_name_stream__ << "theta_COMED";
        param_names__.push_back(param_name_stream__.str());
        param_name_stream__.str(std::string());
        param_name_stream__ << "tau";
        param_names__.push_back(param_name_stream__.str());
        param_name_stream__.str(std::string());
        param_name_stream__ << "beta";
        param_names__.push_back(param_name_stream__.str());
        param_name_stream__.str(std::string());
        param_name_stream__ << "beta_bateman";
        param_names__.push_back(param_name_stream__.str());
        param_name_stream__.str(std::string());
        param_name_stream__ << "kel";
        param_names__.push_back(param_name_stream__.str());
        param_name_stream__.str(std::string());
        param_name_stream__ << "keq";
        param_names__.push_back(param_name_stream__.str());
        size_t eta_pb_j_1_max__ = P;
        for (size_t j_1__ = 0; j_1__ < eta_pb_j_1_max__; ++j_1__) {
            param_name_stream__.str(std::string());
            param_name_stream__ << "eta_pb" << '.' << j_1__ + 1;
            param_names__.push_back(param_name_stream__.str());
        }
        size_t eta_pr_j_1_max__ = P;
        for (size_t j_1__ = 0; j_1__ < eta_pr_j_1_max__; ++j_1__) {
            param_name_stream__.str(std::string());
            param_name_stream__ << "eta_pr" << '.' << j_1__ + 1;
            param_names__.push_back(param_name_stream__.str());
        }
        size_t eta_sb_j_1_max__ = M;
        for (size_t j_1__ = 0; j_1__ < eta_sb_j_1_max__; ++j_1__) {
            param_name_stream__.str(std::string());
            param_name_stream__ << "eta_sb" << '.' << j_1__ + 1;
            param_names__.push_back(param_name_stream__.str());
        }
        size_t eta_sr_j_1_max__ = M;
        for (size_t j_1__ = 0; j_1__ < eta_sr_j_1_max__; ++j_1__) {
            param_name_stream__.str(std::string());
            param_name_stream__ << "eta_sr" << '.' << j_1__ + 1;
            param_names__.push_back(param_name_stream__.str());
        }
        param_name_stream__.str(std::string());
        param_name_stream__ << "omega_pb";
        param_names__.push_back(param_name_stream__.str());
        param_name_stream__.str(std::string());
        param_name_stream__ << "omega_pr";
        param_names__.push_back(param_name_stream__.str());
        param_name_stream__.str(std::string());
        param_name_stream__ << "omega_sb";
        param_names__.push_back(param_name_stream__.str());
        param_name_stream__.str(std::string());
        param_name_stream__ << "omega_sr";
        param_names__.push_back(param_name_stream__.str());

        if (!include_gqs__ && !include_tparams__) return;

        if (include_tparams__) {
        }

        if (!include_gqs__) return;
    }

}; // model

}  // namespace

typedef CPI_function_model_namespace::CPI_function_model stan_model;

